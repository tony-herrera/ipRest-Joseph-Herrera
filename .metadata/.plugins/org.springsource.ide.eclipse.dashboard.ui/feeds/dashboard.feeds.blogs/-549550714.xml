<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2020-12-15T04:43:30Z</updated>
  <entry>
    <title>A Bootiful Podcast: Spring Batch co-lead Mahmoud Ben Hassine</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/15/a-bootiful-podcast-spring-batch-co-lead-mahmoud-ben-hassine" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-15:4305</id>
    <updated>2020-12-15T04:43:30Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this special midweek installment I correct a mistake I made last week when I inadvertently released the episode featuring Dion Almaer, with the interview I conducted with Spring Batch co-lead Mahmoud Ben Hassine. This is the actual episode with Mahmoud Ben Hassine, with the correct title and everything! Enjoy!&lt;/p&gt;
&lt;iframe title="Spring Batch co-lead Mahmoud Ben Hassine" height="122" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/media/player/rpgt4-f50e00?from=pb6admin&amp;download=1&amp;version=1&amp;auto=0&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Helvetica&amp;skin=1&amp;pfauth=&amp;btn-skin=107"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: open-web legend Dion Almaer</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/14/a-bootiful-podcast-open-web-legend-dion-almaer" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-11:4297</id>
    <updated>2020-12-14T23:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this special midweek installment I (Josh Long) correct a mistake I made last week when I inadvertently released the episode featuring open-web legend Dion Almaer with the interview I conducted with the inspirational and oh-so-amazing Spring Batch co-lead Mahmoud Ben Hassine. This is the actual episode with &lt;a href="http://twitter.com/dalmaer"&gt;Dion Almaer (@dalmaer)&lt;/a&gt; who is known for so many contributions to the Java ecosystem and beyond. I know him as a former editor in chief of TheServerSide.com, but you may know him for his work championing the open web at Palm, Walmart, and Google, and many more. &lt;/p&gt;
&lt;iframe title="Open web legend Dion Almaer" height="122" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/media/player/awqpe-f50e26?from=pb6admin&amp;download=1&amp;version=1&amp;auto=0&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Helvetica&amp;skin=1&amp;pfauth=&amp;btn-skin=107"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Case Study: Change Data Capture (CDC) Analysis with CDC Debezium source and Analytics sink in Real-Time</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/14/case-study-change-data-capture-cdc-analysis-with-cdc-debezium-source-and-analytics-sink-in-real-time" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Christian Tzolov</name>
    </author>
    <id>tag:spring.io,2020-12-10:4295</id>
    <updated>2020-12-14T16:30:46Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;This article is part of a blog series that explores the newly redesigned Spring Cloud Stream applications based on Java Functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here are all the previous parts of this blog series.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/07/13/introducing-java-functions-for-spring-cloud-stream-applications-part-0"&gt;Introducing Function Based Streaming Applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/07/20/introducing-java-functions-for-spring-cloud-stream-applications-part-1"&gt;Function Composition with Streaming Applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/07/27/creating-a-supplier-function-and-generating-spring-cloud-stream-source"&gt;How to Build a Supplier and Source Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/08/03/creating-a-function-for-consuming-data-and-generating-spring-cloud-stream-sink-applications"&gt;How to Build a Consumer and Sink Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/08/10/case-study-build-and-run-a-streaming-application-using-an-http-source-and-a-jdbc-sink"&gt;Build and Run a Simple Stream Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/08/17/case-study-http-request-function-and-processor"&gt;Case Study: HTTP Request Function and Processor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/08/25/case-study-reading-from-a-file-and-writing-to-mongodb"&gt;Case Study: File Source and MongoDB Sink&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/09/10/case-study-relational-database-source-and-file-sink"&gt;Case Study: Relational Database Source and File Sink&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/09/29/case-study-remote-file-ingest-with-spring-cloud-data-flow"&gt;Case Study: Remote File Ingest with Spring Cloud Data Flow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/10/26/case-study-aggregator-function-and-processor"&gt;Case Study: Aggregator Function and Processor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2020/11/16/case-study-elasticsearch-sink"&gt;Case Study: Elasticsearch sink&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this post, we will look at the &lt;a href="https://github.com/spring-cloud/stream-applications/blob/master/applications/source/cdc-debezium-source/README.adoc"&gt;Debezium CDC source&lt;/a&gt; that allows us to capture database changes from databases such as MySQL, PostgreSQL, MongoDB, Oracle, DB2 and SQL Server and process those changes, in real-time, over various message binders, such as RabbitMQ, Apache Kafka, Azure Event Hubs, Google PubSub and Solace PubSub+ to name a few.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also we will reveal how to use the &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/sink/analytics-sink"&gt;Analytics sink&lt;/a&gt; to convert the captured database changes into metrics and publish them to various monitoring systems for further analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This article starts by explaining the &lt;code&gt;CDC supplier&lt;/code&gt; and the &lt;code&gt;Analytics consumer&lt;/code&gt; components, showing how to customize and use them programmatically in your own Spring applications. Next we explain how the &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/source/cdc-debezium-source"&gt;CDC source&lt;/a&gt; and the &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/sink/analytics-sink"&gt;Analytics sink&lt;/a&gt;, build upon the supplier and the consumer,  to provide  out of the box, ready to use streaming applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Finally we will demo how easy is it to use &lt;a href="https://dataflow.spring.io"&gt;Spring Cloud Data Flow (SCDF)&lt;/a&gt; for deploying streaming pipelines that react, in real-time, to database updates, convert the change events into analytics metrics and publish them to Prometheus for analysis and visualization with Grafana:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="videoblock"&gt;
&lt;div class="content"&gt;
&lt;iframe width="100%" height="480" src="https://www.youtube.com/embed/8GVcpC9-hJk?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="change-data-capture"&gt;&lt;a class="anchor" href="#change-data-capture"&gt;&lt;/a&gt;Change Data Capture&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Change Data Capture (CDC) is a technique for observing all data changes written to a database and publishing them as events that can be processed in a streamed fashion.
As your application database is always changing, the CDC allows you to react to those  changes and lets your applications stream every row-level change in the same order as they were committed to the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;CDC enables a multitude of use-cases such as: cache invalidation, in-memory data views,  update search indexes, data replication by  keeping different data sources in sync, real-time fraud detection, storing audit trails, data provenance and much more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Spring Cloud Data Flow &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/source/cdc-debezium-source"&gt;CDC Source&lt;/a&gt; application is built around &lt;a href="https://debezium.io/"&gt;Debezium&lt;/a&gt;, a popular, open source, log-based CDC implementation that supports various databases.
The CDC Source supports a variety of message binders, including Apache Kafka, Rabbit MQ, Azure Event Hubs, Google PubSub, Solace PubSub+.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
The &lt;code&gt;CDC source&lt;/code&gt; implementation embeds the &lt;a href="https://debezium.io/documentation/reference/development/engine.html"&gt;Debezium Engine&lt;/a&gt; and it does not depend on Apache Kafka nor ZooKeeper!
You can use the &lt;code&gt;CDC source&lt;/code&gt; along with any of the supported message binders!
The the &lt;code&gt;Debezium Engine&lt;/code&gt; though comes with some &lt;a href="https://debezium.io/documentation/reference/development/engine.html#_handling_failures"&gt;limitations&lt;/a&gt; to be considered.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="cdc-debezium-supplier"&gt;&lt;a class="anchor" href="#cdc-debezium-supplier"&gt;&lt;/a&gt;CDC Debezium Supplier&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/functions/supplier/cdc-debezium-supplier"&gt;CDC Debezium Supplier&lt;/a&gt; is implemented as &lt;code&gt;java.util.function.Supplier&lt;/code&gt; bean which when invoked will deliver the contents of the files in a given directory. The file supplier has the following signature:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Supplier&amp;lt;Flux&amp;lt;Message&amp;lt;?&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The users of the supplier can subscribe to the returned &lt;code&gt;Flux&amp;lt;Message&amp;lt;?&amp;gt;&lt;/code&gt;, which is a stream of messages or &lt;a href="https://debezium.io/documentation/reference/configuration/event-flattening.html#_change_event_structure"&gt;CDC Change Events&lt;/a&gt;, that have a complex structure. Each event consists of three parts (e.g. &lt;code&gt;metadata&lt;/code&gt;, &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;) as shown in the following payload sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="json"&gt;{
  "before": { ... },  // row data before the change.
  "after": { ... },  // row data after the change.
  "source": {  //  the names of the database and table where the change was made.
    "connector": "mysql", "server_id": 223344,"snapshot": "false",
    "name": "my-app-connector", "file": "mysql-bin.000003", "pos": 355, "row": 0,
    "db": "inventory",  // source database name.
    "table": "customers", // source table name.
  },
  "op": "u",  // operation that made the change.
  "ts_ms": 1607440256301, // timestamp - when the change was made.
  "transaction": null  // transaction information (optional).
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If the &lt;code&gt;cdc.flattening.enabled&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, then only the &lt;code&gt;after&lt;/code&gt; section is passed as a standalone message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In order to invoke the CDC supplier, we need to specify a source database to receive the CDC events from. The &lt;code&gt;cdc.connector&lt;/code&gt; property is used to choose between the supported &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt;, &lt;code&gt;sql server&lt;/code&gt;, &lt;code&gt;db2&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;, &lt;code&gt;cassandra&lt;/code&gt; and &lt;code&gt;mongo&lt;/code&gt; source database types..
The &lt;code&gt;cdc.config.database.*&lt;/code&gt; properties help to configure the the source access. Here is a sample configuration for connecting to a MySQL databases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;# DB type
cdc.connector=mysql

# DB access
cdc.config.database.user=debezium
cdc.config.database.password=dbz
cdc.config.database.hostname=localhost
cdc.config.database.port=3306

# DB source metadata
cdc.name=my-sql-connector
cdc.config.database.server.id=85744
cdc.config.database.server.name=my-app-connector&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;cdc.name, cdc.config.database.server.id&lt;/code&gt; and &lt;code&gt;cdc.config.database.server.name&lt;/code&gt; properties are used to identify and dispatch the incoming events.
Optionally you can set the &lt;code&gt;cdc.flattening.enabled=true&lt;/code&gt; to flatten the CDC events to replace the original change event with only its after field to create a simple Kafka record.
Optionally use the &lt;code&gt;cdc.schema=true&lt;/code&gt; to include the DB schema to the CDC events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
The source database must be configured to expose its &lt;code&gt;Write-Ahead Log API&lt;/code&gt; for the Debezium to be able to connect and consume CDC events. The &lt;a href="https://debezium.io/documentation/reference/connectors/index.html"&gt;Debezium Connector Documentation&lt;/a&gt; provides fine description of how to enable the CDC for any of the supported databases.
For the purpose of our demos here we will use a preconfigured &lt;a href="https://hub.docker.com/r/debezium/example-mysql"&gt;MySQL docker image&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="reusing-cdc-supplier-in-custom-applications"&gt;&lt;a class="anchor" href="#reusing-cdc-supplier-in-custom-applications"&gt;&lt;/a&gt;Reusing CDC Supplier in custom applications&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The CDC supplier is a reusable Spring bean that we can inject in end-user custom applications. Once injected, this can be directly invoked and combined with custom processing of the data. Here is an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;@Autowired
Supplier&amp;lt;Flux&amp;lt;Message&amp;lt;?&amp;gt;&amp;gt;&amp;gt; cdcSupplier;

public void consumeDataAndSendEmail() {
  Flux&amp;lt;Message&amp;lt;?&amp;gt; cdcData = cdcSupplier.get();
  messageFlux.subscribe(t -&amp;gt; {
      if (t == something)
         //send the email here.
      }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In the above pseudo-code, we inject the CDC supplier bean and then use it to invoke its &lt;code&gt;get()&lt;/code&gt; method to get a Flux. We then subscribe to that &lt;a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html"&gt;Flux&lt;/a&gt; and each time we receive any data through the Flux, apply some filtering, and take actions based on that. This is just a simple illustration to show how we can reuse the CDC supplier. When you try this in a real application, you probably need to make more adjustments in your implementation, such as converting the default data type of the received data from &lt;code&gt;byte[]&lt;/code&gt; into something else before doing the conditional check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock tip"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
For building a standalone, non-streaming, application you can leverage the &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/functions/common/cdc-debezium-boot-starter"&gt;cdc-debezium-boot-starter&lt;/a&gt;. Just add the &lt;code&gt;cdc-debezium-boot-starter&lt;/code&gt; dependency and implement your custom &lt;code&gt;Consumer&amp;lt;SourceRecord&amp;gt;&lt;/code&gt; handler to process the incoming database change events.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="cdc-debezium-source"&gt;&lt;a class="anchor" href="#cdc-debezium-source"&gt;&lt;/a&gt;CDC Debezium Source&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As we have seen in this blog series, all the out of the box Spring Cloud Stream source applications are already autoconfigured with several out of the box general-purpose processors. You can activate these processors as part of the &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/source/cdc-debezium-source"&gt;CDC source&lt;/a&gt;. Here is an example, where we run the CDC source and receive the data and then transforms the consumed data before sending it out to the destination on middleware.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="bash"&gt;java -jar cdc-debezium-source.jar
 --cdc.connector=mysql --cdc.name=my-sql-connector
 --cdc.config.database.server.name=my-app-connector
 --cdc.config.database.user=debezium --cdc.config.database.password=dbz
 --cdc.config.database.hostname=localhost --cdc.config.database.port=3306
 --cdc.schema=true
 --cdc.flattening.enabled=true
 --spring.cloud.function.definition=cdcSupplier|spelFunction
 --spel.function.expression=payload.toUpperCase()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By providing the value, &lt;code&gt;cdcSupplier|spelFunction&lt;/code&gt; for the &lt;code&gt;spring.cloud.function.definition&lt;/code&gt; property, we are activating the spel function composed with the CDC supplier. Then we provide a SpEL expression that we want to use to transform the data using &lt;code&gt;spel.function.expression&lt;/code&gt;. There are several other functions available to compose this way. Take a look &lt;a href="https://github.com/spring-cloud/stream-applications/blob/master/docs/FunctionComposition.adoc"&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="analytics-consumer"&gt;&lt;a class="anchor" href="#analytics-consumer"&gt;&lt;/a&gt;Analytics Consumer&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/functions/consumer/analytics-consumer"&gt;Analytics consumer&lt;/a&gt; provides a function that computes analytics from the input data messages and publishes them as metrics to various monitoring systems. It leverages the &lt;a href="https://micrometer.io/"&gt;micrometer library&lt;/a&gt; for providing a uniform programming experience across the most popular &lt;a href="https://micrometer.io/docs"&gt;monitoring systems&lt;/a&gt; and uses &lt;a href="https://docs.spring.io/spring-integration/reference/html/spel.html#spel"&gt;Spring Expression Language (SpEL)&lt;/a&gt; for defining how the metric names, values and tags are computed from the input data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We can use the consumer bean directly in our custom applications to compute analytics from the passing messages. Here is the type signature of the Analytics consumer bean:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;Consumer&amp;lt;Message&amp;lt;?&amp;gt;&amp;gt; analyticsConsumer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Once injected into a custom application, users can directly invoke the &lt;code&gt;accept()&lt;/code&gt; method of the consumer and provide a &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; object to compute and publish the analytics to the backend monitoring system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://docs.spring.io/spring-integration/reference/html/message.html"&gt;Message&lt;/a&gt; is a generic container for data. Each Message instance includes a &lt;code&gt;payload&lt;/code&gt; and &lt;code&gt;headers&lt;/code&gt; containing user-extensible properties as key-value pairs.
The SpEL expressions are used to access message’s headers and payload to compute metrics amounts and tags.
For example a counter metrics can have a value &lt;code&gt;amount&lt;/code&gt; computed from the size of the input message payload add a &lt;code&gt;my_tag&lt;/code&gt; tag, extracted from the &lt;code&gt;kind&lt;/code&gt; header value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;analytics.amount-expression=payload.lenght()
analytics.tag.expression.my_tag=headers['kind']&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Analytics consumer configuration properties start with the &lt;code&gt;analytics.*&lt;/code&gt; prefix. Consult the &lt;a href="https://github.com/spring-cloud/stream-applications/blob/master/functions/consumer/analytics-consumer/src/main/java/org/springframework/cloud/fn/consumer/analytics/AnalyticsConsumerProperties.java"&gt;AnalyticsConsumerProperties&lt;/a&gt; for the available analytics properties.
The monitoring configuration properties start with a &lt;code&gt;management.metrics.export&lt;/code&gt; prefix. For configuring a particular monitoring system follow the provided &lt;a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/production-ready-features.html#production-ready-metrics-export"&gt;configuration instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="analytics-sink"&gt;&lt;a class="anchor" href="#analytics-sink"&gt;&lt;/a&gt;Analytics Sink&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As in the case of &lt;code&gt;CDC Source&lt;/code&gt;, the Spring Cloud Stream out of the box applications already provide an &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/sink/analytics-sink"&gt;Analytics sink&lt;/a&gt; based on the &lt;code&gt;Analytics consumer&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The sink is available for both &lt;a href="https://repo.spring.io/libs-snapshot-local/org/springframework/cloud/stream/app/mongodb-sink-kafka/3.0.0-SNAPSHOT"&gt;Apache Kafka&lt;/a&gt; and &lt;a href="https://repo.spring.io/libs-snapshot-local/org/springframework/cloud/stream/app/mongodb-sink-rabbit/3.0.0-SNAPSHOT"&gt;RabbitMQ&lt;/a&gt; binder variants.
When used as a Spring Cloud Stream sink, the Analytics consumer is automatically configured to accept data from the respective middleware system, for example, from a Kafka topic or RabbitMQ exchange.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="running-on-spring-cloud-data-flow"&gt;&lt;a class="anchor" href="#running-on-spring-cloud-data-flow"&gt;&lt;/a&gt;Running on Spring Cloud Data Flow&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Running both &lt;code&gt;CDC source&lt;/code&gt; and &lt;code&gt;Analytics sink&lt;/code&gt; standalone was fine, but Spring Cloud Data Flow makes it really easy to run them as a pipeline. Basically we want to orchestrate data flows that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/stream-applications/blob/gh-pages/img/cdc-analytics/scdf-pipelines.png?raw=true" alt="scdf pipelines" width="30%"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;cdc-log&lt;/code&gt; pipeline deploys a &lt;code&gt;cdc-source&lt;/code&gt; that streams all database changes into a &lt;code&gt;log-sink&lt;/code&gt; using  JSON message format. In parallel the &lt;code&gt;cdc-analytics-tap&lt;/code&gt;  pipeline &lt;a href="https://dataflow.spring.io/docs/feature-guides/streams/fanin-fanout/"&gt;taps&lt;/a&gt; the &lt;code&gt;cdc-source&lt;/code&gt; output into an &lt;code&gt;analytics-sink&lt;/code&gt; to compute DB statistics from the CDC events and publish them to time-series database (TSDB) such as Prometheus or Wavefront. The Grafana dashboard is used to visualize those changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Spring Cloud Data Flow &lt;a href="https://dataflow.spring.io/docs/installation/"&gt;installation instructions&lt;/a&gt; explains how to install Spring Cloud Data Flow fore any of the supported cloud platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Below, we will briefly provide the steps to set up Spring Cloud Data Flow.
First, we need to get the docker-compose files for running Spring Cloud Data Flow, &lt;a href="https://dataflow.spring.io/docs/installation/local/docker-customize/#prometheus&amp;#8212;&amp;#8203;grafana"&gt;Prometheus and Grafana&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;wget -O docker-compose.yml https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/v2.7.0/spring-cloud-dataflow-server/docker-compose.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;wget -O docker-compose-prometheus.yml https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/v2.7.0/spring-cloud-dataflow-server/docker-compose-prometheus.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also, get this additional docker-compose file to install a source MySQL database configured to expose its write-ahead log that the cdc-debezium connects to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;wget -O mysql-cdc.yml https://gist.githubusercontent.com/tzolov/48dec8c0db44e8086916129201cc2c8c/raw/26e1bf435d58e25ff836e415dae308edeeef2784/mysql-cdc.yml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The mysql-cdc uses the &lt;a href="https://hub.docker.com/r/debezium/example-mysql"&gt;debezium/example-mysql&lt;/a&gt; image and comes with an inventory, sample database:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/stream-applications/blob/gh-pages/img/cdc-analytics/invetory-db.png?raw=true" alt="invetory db" width="50%"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We need to set up a few environment variables in order to run Spring Cloud Data Flow properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="shell"&gt;export DATAFLOW_VERSION=2.7.0
export SKIPPER_VERSION=2.6.0
export STREAM_APPS_URI=https://repo.spring.io/libs-snapshot-local/org/springframework/cloud/stream/app/stream-applications-descriptor/2020.0.0-SNAPSHOT/stream-applications-descriptor-2020.0.0-SNAPSHOT.stream-apps-kafka-maven&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now that we have everything ready to go, it is time to start running Spring Cloud Data Flow and all the other ancillary components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="shell"&gt;docker-compose -f docker-compose.yml -f docker-compose-prometheus.yml -f mysql-cdc.yml up&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonitionblock tip"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
To use &lt;code&gt;RabbitMQ&lt;/code&gt; instead of &lt;code&gt;Apache Kafka&lt;/code&gt; you can download an additional docker-compose file as explained in the  &lt;a href="https://dataflow.spring.io/docs/installation/local/docker-customize/#rabbitmq-instead-of-kafka"&gt;RabbitMQ Instead of Kafka
&lt;/a&gt; instructions, and set the &lt;code&gt;STREAM_APPS_URI&lt;/code&gt; variable to &lt;a href="https://repo.spring.io/libs-snapshot-local/org/springframework/cloud/stream/app/stream-applications-descriptor/2020.0.0-SNAPSHOT/stream-applications-descriptor-2020.0.0-SNAPSHOT.stream-apps-rabbit-maven" class="bare"&gt;https://repo.spring.io/libs-snapshot-local/org/springframework/cloud/stream/app/stream-applications-descriptor/2020.0.0-SNAPSHOT/stream-applications-descriptor-2020.0.0-SNAPSHOT.stream-apps-rabbit-maven&lt;/a&gt; instead.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="admonitionblock tip"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
To use Wavefront instead of Prometheus &amp;amp; Grafana, follow the &lt;a href="https://dataflow.spring.io/docs/installation/local/docker-customize/#wavefront"&gt;Wavefront&lt;/a&gt; instructions.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Once SCDF is up and running, go to &lt;a href="http://localhost:9393/dashboard"&gt;http://localhost:9393/dashboard&lt;/a&gt;. Then go to &lt;code&gt;Streams&lt;/code&gt; on the left-hand side and select &lt;code&gt;Create Stream&lt;/code&gt;. Select &lt;code&gt;cdc-debezium&lt;/code&gt; from the source applications and &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;analytics&lt;/code&gt; from the sink applications to define the &lt;code&gt;cdc-log = cdc-debezium | log&lt;/code&gt; and the &lt;code&gt;cdc-analytic-tap = :cdc-log.cdc-debezium &amp;gt; analytics&lt;/code&gt; pipelines. You can click on the application&amp;#8217;s options to select the desired properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For a quicker bootstrap,  you can copy/paste the following ready to use pipeline definition snippets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;cdc-log = cdc-debezium --cdc.name=mycdc --cdc.flattening.enabled=false --cdc.connector=mysql --cdc.config.database.user=debezium --cdc.config.database.password=dbz --cdc.config.database.dbname=inventory --cdc.config.database.hostname=mysql-cdc --cdc.config.database.port=3307 --cdc.stream.header.offset=true --cdc.config.database.server.name=my-app-connector --cdc.config.tombstones.on.delete=false | log&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;cdc-analytic-tap = :cdc-log.cdc-debezium &amp;gt; analytics --analytics.name=cdc --analytics.tag.expression.table=#jsonPath(payload,'$..table') --analytics.tag.expression.operation=#jsonPath(payload,'$..op') --analytics.tag.expression.db=#jsonPath(payload,'$..db')&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;cdc-log&lt;/code&gt; pipeline deploys a &lt;code&gt;cdc-debezium source&lt;/code&gt; that connects to an MySQL database at &lt;code&gt;mysql-cdc:3307&lt;/code&gt; and streams the  DB change events to the &lt;code&gt;log sink&lt;/code&gt;. Consult the &lt;a href="https://github.com/spring-cloud/stream-applications/blob/master/applications/source/cdc-debezium-source/README.adoc"&gt;cdc-debezium docs&lt;/a&gt; for the available configuration options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;cdc-analytic-tap&lt;/code&gt; pipeline taps into the output of the &lt;code&gt;cdc-debezium source&lt;/code&gt; and streams the cdc events to an &lt;code&gt;analytics sink&lt;/code&gt;. The analytics creates a &lt;a href="https://micrometer.io/docs/concepts#_counters"&gt;metrics counter&lt;/a&gt; (called cdc) and uses &lt;a href="https://docs.spring.io/spring-integration/reference/html/spel.html#built-in-spel-functions"&gt;SpEL expressions&lt;/a&gt; to compute metrics tags (e.g. db, table and operations) from the streamed message payloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For example, let’s modify the &lt;code&gt;customers&lt;/code&gt; table in the MySQL &lt;code&gt;inventory&lt;/code&gt; database. The update transaction is sent as a change event to the &lt;code&gt;cdc-debezium source&lt;/code&gt;, that converts the native DB event into an uniform message payload like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="json"&gt;{
  "before": {
    "id": 1004, "first_name": "Anne", "last_name": "Kretchmar", "email": "annek@noanswer.org"
  },
  "after": {
    "id": 1004, "first_name": "Anne2", "last_name": "Kretchmar", "email": "annek@noanswer.org"
  },
  "source": {
    "version": "1.3.1.Final", "connector": "mysql", "server_id": 223344, "thread": 5,
    "name": "my-app-connector", "file": "mysql-bin.000003", "pos": 355, "row": 0,
    "db": "inventory",
    "table": "customers",
  },
  "op": "u",
  "ts_ms": 1607440256301,
  "transaction": null
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following SpEL expressions are used to compute 3 tags (&lt;code&gt;db&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;operation&lt;/code&gt;) from the CDC message payload. Those tags are assigned to every cdc metrics published to Prometheus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;--analytics.tag.expression.db=#jsonPath(payload,'$..db')
--analytics.tag.expression.table=#jsonPath(payload,'$..table')
--analytics.tag.expression.operation=#jsonPath(payload,'$..op')&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here is a screenshot of how it should look after all the properties are selected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/stream-applications/blob/gh-pages/img/cdc-analytics/scdf-create-streams.png?raw=true" alt="scdf create streams" width="100%"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://dataflow.spring.io/docs/stream-developer-guides/getting-started/stream/#creating-the-stream"&gt;Create&lt;/a&gt; and  &lt;a href="https://dataflow.spring.io/docs/stream-developer-guides/getting-started/stream/#deploying-a-stream"&gt;deploy&lt;/a&gt; the &lt;code&gt;cdc-log&lt;/code&gt; and the &lt;code&gt;cdc-analytics-tap&lt;/code&gt; pipelines, accepting all the default options. Optionally you can use the &lt;code&gt;Group Actions&lt;/code&gt; to deploy both streams simultaneously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Once the streams are deployed you can check the logs of the deployed applications via the SCDF UI or using the Skipper docker container as &lt;a href="https://dataflow.spring.io/docs/stream-developer-guides/getting-started/stream/#results"&gt;explained&lt;/a&gt; in the documentation.
If you check the logs of the Log sink application you should see the CDC JSON messages similar to those:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/stream-applications/blob/gh-pages/img/cdc-analytics/cdc-event-log.png?raw=true" alt="cdc event log" width="100%"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Next go to the Grafana Dashboard using the &lt;a href="https://dataflow.spring.io/docs/feature-guides/streams/monitoring/#data-flow-metric-buttons"&gt;buttons&lt;/a&gt; (or just open &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt;) and login as user:`admin` and password:`admin`. You can explore the &lt;code&gt;Applications&lt;/code&gt; dashboard to check the performance of the deployed pipelines.
Now you can import the &lt;a href="https://gist.github.com/tzolov/d2a71fc58616278fb8852f5fc43d242f#file-cdc-grafana-dashboard-prometheus-json"&gt;CDC Grafana Dashboard-Prometheus.json&lt;/a&gt; dashboard and see a dashboard similar to this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/stream-applications/blob/gh-pages/img/cdc-analytics/grafana-dashboard.png?raw=true" alt="grafana dashboard" width="100%"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following queries have been used to aggregate the &lt;code&gt;cdc_total&lt;/code&gt; metrics inside Prometheus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;sort_desc(topk(10, sum(cdc_total) by (db, table)))
sort_desc(topk(100, sum(cdc_total) by (op)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonitionblock tip"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
You can open the Prometheus UI at &lt;a href="http://localhost:9090"&gt;http://localhost:9090&lt;/a&gt; to check the configuration as well as run some ad hoc PQL queries.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="generate-db-activity"&gt;&lt;a class="anchor" href="#generate-db-activity"&gt;&lt;/a&gt;Generate DB activity&lt;/h4&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can connect to the inventory CDC MySQL databases at &lt;code&gt;localhost:3307&lt;/code&gt; (user: &lt;code&gt;root&lt;/code&gt; and password: &lt;code&gt;debezium&lt;/code&gt;) and start modifying the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following docker command shows how to connect to the mysql-cdc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="bash"&gt;docker exec -it mysql-cdc  mysql -uroot -pdebezium --database=inventory&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following  script helps to generate multiple insert, update and delete DB transactions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="bash"&gt;for i in {1..100}; do docker exec -it mysql-cdc  mysql -uroot -pdebezium --database=inventory -e'INSERT INTO customers (first_name, last_name, email) VALUES ("value1", "value2", "val@bla"); UPDATE customers SET first_name="value2" WHERE first_name="value1"; DELETE FROM customers where first_name="value2";'; done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You will see the &lt;code&gt;log-sink&lt;/code&gt; logs reflecting those changes as well as the CDC dashboard charts updates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusions-and-future-work"&gt;&lt;a class="anchor" href="#conclusions-and-future-work"&gt;&lt;/a&gt;Conclusions and future work&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this blog, we saw how the CDC-debezium supplier and the Analytics consumer functions and their corresponding Spring Cloud Stream source and sink work. The supplier and consumer functions can be injected into custom applications for combining with other business logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The source and the sink applications are provided out of the box for use with Kafka and RabbitMQ middleware variants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can easily build standalone applications combining the Cdc-debezium supplier with Geode consumer to create and maintain an in-memory view of your database data. Similarly you can combine the Cdc-debezium supplier with the Elasticsearch consumer for maintaining in real-time a searchable index for your database data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;What is more exciting is that you can realize the above scenarios using the OOTB &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/source/cdc-debezium-source"&gt;cdc-debezium source&lt;/a&gt; , &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/sink/geode-sink"&gt;geode sink&lt;/a&gt; and &lt;a href="https://github.com/spring-cloud/stream-applications/tree/master/applications/sink/elasticsearch-sink"&gt;elasticsearch sink&lt;/a&gt; applications. You can build those pipelines over different message binders and source databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This &lt;a href="https://www.infoq.com/presentations/spring-pipeline-prometheus-grafana/?utm_campaign=infoq_content&amp;amp;utm_source=twitter&amp;amp;utm_medium=feed&amp;amp;utm_term=Devops"&gt;Spring One presentation&lt;/a&gt; demonstrates an advanced use-case,  using CDC-debezium and Machine Learning to build a streaming data pipeline for credit card fraud detection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/stream-applications/blob/gh-pages/img/cdc-analytics/cdc-fraud-detection.png?raw=true" alt="cdc fraud detection" width="50%"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We still have a few more episodes coming up in this blog series. Please stay tuned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Statemachine 3.0.0-RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/11/spring-statemachine-3-0-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2020-12-05:4286</id>
    <updated>2020-12-11T12:25:46Z</updated>
    <content type="html">&lt;p&gt;Yes, we&amp;rsquo;re going reactive!&lt;/p&gt;
&lt;p&gt;On behalf of the team and everyone that contributed, I am pleased to announce that the first release candidate of Spring Statemachine 3.0.0 has been released and is available from &lt;a href="https://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Highlights of this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Relevant api&amp;rsquo;s working with statemachine now have reactive methods.&lt;/li&gt;
  &lt;li&gt;From a functional point of view this release is equivalent what&amp;rsquo;s in&lt;br/&gt; &lt;code&gt;2.2.x&lt;/code&gt;, &lt;code&gt;2.3.x&lt;/code&gt; and &lt;code&gt;2.4.x&lt;/code&gt; branches apart from reactive changes.&lt;/li&gt;
  &lt;li&gt;We&amp;rsquo;ve chosen to align with recently released Spring Boot 2.4.1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Internally everything is basically working atop of reactive concepts while we still keep old style methods around for blocking world. Plan is to see if and when it&amp;rsquo;s possible to phase out from a blocking world. Now few words about new api&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;With good ol&amp;rsquo; blocking world you simple send an event and statemachine returns a boolean flag if event is accepted.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;StateMachine&amp;lt;String, String&amp;gt; stateMachine;&#xD;
&#xD;
boolean accepted = stateMachine.sendEvent(&amp;quot;event1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One slightly annoying thing were that you couldn&amp;rsquo;t differentiate between cases where event were accepted(event caused a transition), denied(interceptor error or no possible transition) or deferred(in case machine config used deferred events). We chose to enrich what gets returned from event handling methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;StateMachine&amp;lt;String, String&amp;gt; stateMachine;&#xD;
&#xD;
Mono&amp;lt;StateMachineEventResult&amp;lt;String, String&amp;gt;&amp;gt; result = stateMachine&#xD;
  .sendEvent(Mono.just(MessageBuilder.withPayload(&amp;quot;event1&amp;quot;).build()));&#xD;
&#xD;
result.subscribe();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly, one obvious thing as you probably guessed if being familiar with Reactor is that nothing happens until you subscribe to a returned &lt;code&gt;Mono&lt;/code&gt;, secondly returned type within &lt;code&gt;Mono&lt;/code&gt; is a &lt;code&gt;StateMachineEventResult&lt;/code&gt; which contains more info about what happened with an event handling.&lt;/p&gt;
&lt;p&gt;What about &lt;code&gt;Flux&lt;/code&gt;, well simply pass in a flux and get a flux and handle it whatever you can do in a Reactor!&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;StateMachine&amp;lt;String, String&amp;gt; stateMachine;&#xD;
&#xD;
Message&amp;lt;String&amp;gt; message1 = MessageBuilder.withPayload(&amp;quot;event1&amp;quot;).build();&#xD;
Message&amp;lt;String&amp;gt; message2 = MessageBuilder.withPayload(&amp;quot;event2&amp;quot;).build();&#xD;
&#xD;
Flux&amp;lt;StateMachineEventResult&amp;lt;String, String&amp;gt;&amp;gt; results = stateMachine&#xD;
  .sendEvents(Flux.just(message1, message2));&#xD;
&#xD;
results.subscribe();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What about actions as your main work with a statemachine happens there? Original blocking signature is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface Action&amp;lt;S, E&amp;gt; {&#xD;
  void execute(StateContext&amp;lt;S, E&amp;gt; context);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;New &lt;code&gt;ReactiveAction&lt;/code&gt; is simply a java&amp;rsquo;s &lt;code&gt;Function&lt;/code&gt; with types &lt;code&gt;StateContext&amp;lt;S, E&amp;gt;&lt;/code&gt; and &lt;code&gt;Mono&amp;lt;Void&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface ReactiveAction&amp;lt;S, E&amp;gt;&#xD;
  extends Function&amp;lt;StateContext&amp;lt;S, E&amp;gt;, Mono&amp;lt;Void&amp;gt;&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which translates to&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;class MyAction implements ReactiveAction&amp;lt;String, String&amp;gt; {&#xD;
  @Override&#xD;
  public Mono&amp;lt;Void&amp;gt; apply(StateContext&amp;lt;String, String&amp;gt; context) {&#xD;
      return Mono.empty();&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@EnableStateMachine&#xD;
public class StateMachineConfig extends StateMachineConfigurerAdapter&amp;lt;String, String&amp;gt; {&#xD;
&#xD;
  @Override&#xD;
  public void configure(StateMachineStateConfigurer&amp;lt;String, String&amp;gt; states)&#xD;
      throws Exception {&#xD;
    states&#xD;
      .withStates()&#xD;
      .initial(&amp;quot;state1&amp;quot;)&#xD;
      .state(&amp;quot;state2&amp;quot;);&#xD;
  }&#xD;
&#xD;
  @Override&#xD;
  public void configure(StateMachineTransitionConfigurer&amp;lt;String, String&amp;gt; transitions)&#xD;
      throws Exception {&#xD;
    transitions&#xD;
      .withExternal()&#xD;
        .source(&amp;quot;state1&amp;quot;).target(&amp;quot;state2&amp;quot;)&#xD;
        .actionFunction(context -&amp;gt; Mono.fromRunnable(() -&amp;gt; {&#xD;
          System.out.println(&amp;quot;HI&amp;quot;);&#xD;
        }));&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or &lt;em&gt;action&lt;/em&gt; as &lt;code&gt;Function&lt;/code&gt; definition in a normal way:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Function&amp;lt;StateContext&amp;lt;String, String&amp;gt;, Mono&amp;lt;Void&amp;gt;&amp;gt; action =&#xD;
  context -&amp;gt; Mono.empty();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-statemachine"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-statemachine"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-statemachine/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-statemachine/docs/3.0.0-RC1/reference/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.4.1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/11/spring-boot-2-4-1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-12-11:4299</id>
    <updated>2020-12-11T08:26:35Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.4.1 has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.4.1"&gt;59 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.4.1/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.3.7 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/11/spring-boot-2-3-7-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-12-11:4298</id>
    <updated>2020-12-11T07:05:56Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.3.7 has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.3.7.RELEASE"&gt;35 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.3.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.2.12 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/10/spring-boot-2-2-12-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-12-10:4296</id>
    <updated>2020-12-10T18:14:23Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.2.12 has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.2.12.RELEASE"&gt;51 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Cloud Events and Spring - part 1</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/10/cloud-events-and-spring-part-1" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oleg Zhurakousky</name>
    </author>
    <id>tag:spring.io,2020-12-02:4282</id>
    <updated>2020-12-10T14:21:00Z</updated>
    <content type="html">&lt;h4&gt;&lt;a href="#prologue" class="anchor" name="prologue"&gt;&lt;/a&gt;Prologue&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Uniformity of data across systems and platforms&lt;/em&gt;&lt;/strong&gt; is a singular and noble purpose of &lt;a href="https://cloudevents.io/"&gt;Cloud Event specification&lt;/a&gt;. With its growing adoption, the hope is that the developers and architects would no longer have to worry about how to deal with various events coming from different systems and platforms&amp;hellip;&lt;br/&gt;But the point of this post is not to re-litigate or re-justify Cloud Events. A simple Google search renders quite a few points for you to read to help the &amp;ldquo;&lt;em&gt;Why Cloud Events?&lt;/em&gt;&amp;rdquo; question.&lt;br/&gt;The goal of this and subsequent posts on the subject is to share some ideas and the work we&amp;rsquo;ve been doing here at Spring to anticipate and handle greater adoption of Cloud Events. &lt;/p&gt;&lt;h4&gt;&lt;a href="#introduction" class="anchor" name="introduction"&gt;&lt;/a&gt;Introduction&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/messaging/Message.html"&gt;Message&lt;/a&gt;, which is the Spring implementation of the EIP &lt;a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html"&gt;Message&lt;/a&gt;, is an adequate structure to represent Cloud Event!&lt;/em&gt;&lt;/strong&gt; That is the case we are building here. If true, then any framework or application that currently relies on Spring Messaging would automatically support Cloud Event use cases. So&amp;hellip;&lt;/p&gt;&lt;h4&gt;&lt;a href="#a-message-is-a-cloud-event" class="anchor" name="a-message-is-a-cloud-event"&gt;&lt;/a&gt;A Message is a Cloud Event&lt;/h4&gt;
&lt;p&gt;According to the official &lt;a href="https://cloudevents.io/"&gt;website&lt;/a&gt;, &lt;strong&gt;&lt;em&gt;Cloud Events&lt;/em&gt;&lt;/strong&gt; is &amp;ldquo;A specification for describing event data in a common way&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If you read the specification (which is quite simple), you quickly realize that Cloud Event effectively defines a canonical and platform-independent data structure to be exchanged across systems and platforms in a uniform way.&lt;br/&gt;The structure is rather simple. It encapsulates some payload as a &lt;code&gt;data&lt;/code&gt; field and additional metadata as &lt;code&gt;attributes&lt;/code&gt; (a key/value structure). The &lt;code&gt;attributes&lt;/code&gt; themselves are split into well-defined metadata fields called &lt;code&gt;attributes&lt;/code&gt; (required and optional) and loosely defined or undefined fields called &lt;code&gt;extension attributes&lt;/code&gt;.&lt;/p&gt;
&lt;img src="https://github.com/spring-cloud/spring-cloud-function/blob/master/docs/src/main/images/ce.png?raw=true" width="40%" height="40%"&gt;
&lt;p&gt;That’s pretty much it for now.&lt;/p&gt;
&lt;p&gt;Now, for those of you who are familiar with a &lt;em&gt;Message&lt;/em&gt; - one of the core &lt;a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html"&gt;Enterprise Integration Patterns&lt;/a&gt; - and its definition in &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/messaging/Message.html"&gt;Spring Messaging&lt;/a&gt;, you may say: This looks very familiar! And rightfully so.&lt;/p&gt;
&lt;img src="https://github.com/spring-cloud/spring-cloud-function/blob/master/docs/src/main/images/message.png?raw=true" width="40%" height="40%"&gt;
&lt;p&gt;Just like Cloud Event, Message defines a canonical and platform-independent data structure to be exchanged across systems and platforms in a uniform way.&lt;br/&gt;This structure is very simple. It encapsulates some payload as a &lt;code&gt;payload&lt;/code&gt; field and metadata as &lt;code&gt;headers&lt;/code&gt; (key/value structure).&lt;/p&gt;
&lt;p&gt;Why is this important? As with any other technology, providing integration for Cloud Events in Spring is really a question of the effort necessary to realize its concepts within the confines of the well-known and familiar (to its users) Spring idioms and abstractions.&lt;br/&gt;And that is why &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/messaging/Message.html"&gt;Message&lt;/a&gt; comes to mind. Given its near-perfect match to the structure defined by the Cloud Event specification, &amp;ldquo;Can &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/messaging/Message.html"&gt;Message&lt;/a&gt; be the appropriate abstraction in Spring to represent Cloud Event?&amp;rdquo; Because, if the answer is &amp;ldquo;yes&amp;rdquo;, tens of thousands frameworks and application that currently rely on Spring Messaging can automatically support Cloud Event use cases, which means that users of such frameworks as well as frameworks themselves would be able to recognize incoming Cloud Event instances as well as create them, all within the confines of the specification-defined protocol details, such as &lt;em&gt;attribute prefixes&lt;/em&gt;, &lt;em&gt;type system&lt;/em&gt; and others.&lt;/p&gt;&lt;h4&gt;&lt;a href="#functional-amp-non-functional-boilerplate" class="anchor" name="functional-amp-non-functional-boilerplate"&gt;&lt;/a&gt;Functional &amp;amp; Non-Functional (boilerplate)&lt;/h4&gt;
&lt;p&gt;We also need to look at some of the typical Cloud Event usage patterns. We do that to isolate what we call &lt;em&gt;functional&lt;/em&gt; vs. &lt;em&gt;non-functional&lt;/em&gt; (boilerplate) aspects. So let&amp;rsquo;s describe some of them:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Produce something and encapsulate it into a Cloud Event&lt;/li&gt;
  &lt;li&gt;Consume something that may have originated from a Cloud Event&lt;/li&gt;
  &lt;li&gt;Consume the actual Cloud Event (different from above, since it implies consuming the entire event)&lt;/li&gt;
  &lt;li&gt;Route and filter based on Cloud Event attributes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list is a small subset of some of the typical usage patterns, but it helps illustrate the problem domain. It also helps us to begin understanding and isolating &lt;em&gt;functional&lt;/em&gt; versus &lt;em&gt;non-functional&lt;/em&gt; aspects.&lt;br/&gt;What is also interesting is that most of the described patterns are the examples of non-functional aspects, something that a seasoned Spring user would expect to be handled by the framework.&lt;br/&gt;For example, while it is expected from the user to &amp;ldquo;produce something&amp;rdquo; (functional), the &amp;ldquo;encapsulate it into a Cloud Event&amp;rdquo; part should be handled by the framework (non-functional). The same principle applies when consuming Cloud Event. While vaguely stated, it generally implies that a user may only care about the data portion of the Cloud Event, most likely expecting it in the form of a domain-specific object that the framework should extract, convert and serve. All of these are, once again, examples of non-functional aspects.&lt;br/&gt;Then there is the question of Cloud Event attributes and their prefixes (e.g., &lt;code&gt;ce_&lt;/code&gt; vs. &lt;code&gt;ce-&lt;/code&gt; etc.) which effectively describe the origin or the destination of the event, something one would expect the framework to handle as well, especially given that the implementer of the functionality may not even be aware of the origin or the destination of the event. &lt;/p&gt;&lt;h4&gt;&lt;a href="#spring" class="anchor" name="spring"&gt;&lt;/a&gt;Spring&lt;/h4&gt;
&lt;p&gt;Spring has been successfully supporting transformation, type conversion, routing, filtering, and many more messaging patterns (most of which are described by &lt;a href="https://www.enterpriseintegrationpatterns.com"&gt;Enterprise Integration Patterns&lt;/a&gt;) for over a decade through Message-based frameworks with tens of thousands of user applications running in production. And how can we forget the infrastructure-type concerns, such as connectivity, session and transaction management, sending and receiving, retries, error handling, recovery, and so on?&lt;br/&gt;In Spring, our general motto is &lt;strong&gt;&lt;em&gt;We try to take care of non-functional (boilerplate) concerns, leaving you with only the functional (business logic) concerns&lt;/em&gt;&lt;/strong&gt;. Thus, it is always important for us to distinguish the two in the context of a given integration and outsource as much as we can to the framework. We also expose utilities, libraries, and configuration options that let you influence certain non-functional concerns, as doing so may still be required for a variety of reasons.&lt;/p&gt;
&lt;p&gt;So, given that, what would a typical Spring application that supports Cloud Events look like, especially in the era of &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;? &lt;/p&gt;
&lt;p&gt;Here is an example of an application that receives a Cloud Event as an HTTP request and produces a Cloud Event as an HTTP response:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public static class SampleApplication&#xD;
  public static void main(String[] args) throws Exception {&#xD;
    SpringApplication.run(SampleApplication.class, args);&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  Function&amp;lt;Person, Employee&amp;gt; hire() {&#xD;
	return person -&amp;gt; {&#xD;
            Employee employee = ...&#xD;
            return employee;&#xD;
        };&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is an example of an application that receives a Cloud Event from Apache Kafka and sends it to a RabbitMQ messaging broker:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public static class SampleApplication&#xD;
  public static void main(String[] args) throws Exception {&#xD;
    SpringApplication.run(SampleApplication.class, args);&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  Function&amp;lt;Person, Employee&amp;gt; hire() {&#xD;
	return person -&amp;gt; {&#xD;
            Employee employee = ...&#xD;
            return employee;&#xD;
        };&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We omitted the implementation details of the functions, since they have no relevance to the topic. The framework does not really care what you do. It cares only about what you expect &amp;ndash; &lt;em&gt;input&lt;/em&gt; &amp;ndash; and what you produce &amp;ndash; &lt;em&gt;output&lt;/em&gt; &amp;ndash; and that information is available from the function signature. &lt;/p&gt;
&lt;p&gt;However, I am certain that is not what is on your mind, as you probably wonder why the two applications that I have presented as being different are actually identical? And where does it say that one application is a REST endpoint while another is a message handler?&lt;br/&gt;Well, to answer those questions, we need to know the context of the execution, which comes from Spring Boot auto-configurations that are available to your application classpath. So, for example, to make the description of the first application true, you&amp;rsquo;ll need the &lt;code&gt;spring-cloud-function-web&lt;/code&gt; dependency on your classpath, which brings all the necessary components and additional auto-configurations needed to expose your function as a REST endpoint. As for the second, we can simply fall back on the &lt;a href="https://spring.io/projects/spring-cloud-stream"&gt;extensive library of binders&lt;/a&gt; we already provide for Apache Kafka, AMQP, Solace, HTTP, AWS, Google and more. These binders and related auto-configurations will turn the example code into a message handler. &lt;/p&gt;&lt;h4&gt;&lt;a href="#message" class="anchor" name="message"&gt;&lt;/a&gt;Message&lt;/h4&gt;
&lt;p&gt;Message is at the center of this enablement, the one canonical structure that all moving parts in Spring understand. It is one structure that can clearly communicate intentions and expectations. &lt;em&gt;Where did it arrive from? Where will it go? Who sent it? What are the contents? Does it represent a Cloud Event? If so, is it in binary-mode or structured?&lt;/em&gt; The list is endless, but the one constant is that Message as a structure and as a concept is well positioned to answer these questions.&lt;br/&gt;With that in mind, Cloud Event becomes another kind of Message. The Spring Framework can handle it as it would any other Message and free you to think about your business logic rather than the details of the plumbing. &lt;/p&gt;&lt;h4&gt;&lt;a href="#summary" class="anchor" name="summary"&gt;&lt;/a&gt;Summary&lt;/h4&gt;
&lt;p&gt;So, &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html"&gt;Message&lt;/a&gt; &lt;em&gt;is&lt;/em&gt; not only an adequate structure to represent a Cloud Event, it is also the right abstraction to handle Cloud Event use cases in Spring&lt;/em&gt;&lt;/strong&gt;. I hope that is clear, and with the upcoming Cloud Event support for Message, we are on the path of providing Cloud Events support for any application that relies on Spring Messaging.&lt;/p&gt;
&lt;p&gt;In the follow-up post, we will cover the technical details of the upcoming Cloud Event support within several Spring frameworks as well Cloud Event integration with Spring using &lt;a href="https://github.com/cloudevents/sdk-java"&gt;Cloud Event Java SDK&lt;/a&gt;.&lt;br/&gt;But if you can&amp;rsquo;t wait, you can start looking at some of the samples now:&lt;br/&gt;- &lt;a href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-samples/function-sample-cloudevent"&gt;Spring Cloud Function/Spring Cloud Stream&lt;/a&gt;&lt;br/&gt;- &lt;a href="https://github.com/dsyer/knative-docs/tree/cloudevents-spring/docs/serving/samples/cloudevents/cloudevents-spring"&gt;KNative&lt;/a&gt;&lt;br/&gt;- &lt;a href="https://github.com/cloudevents/sdk-java/tree/master/examples/spring-reactive"&gt;Spring reactive via Java SDK&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.3.0 RC1 available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/10/spring-vault-2-3-0-rc1-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-12-10:4294</id>
    <updated>2020-12-10T13:15:35Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;d like to announce the availability of the first Spring Vault release candidate &lt;code&gt;2.3.0-RC1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release contains a series of changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated &lt;code&gt;SecretLeaseContainer&lt;/code&gt; endpoints using now &lt;code&gt;/sys/leases&lt;/code&gt; instead of &lt;code&gt;/sys/revoke&lt;/code&gt; and &lt;code&gt;/sys/renew&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduction of &lt;code&gt;AuthenticationStepsOperator&lt;/code&gt; which allows non-blocking access to &lt;code&gt;Resource&lt;/code&gt;. This change also introduces a reloading capability for authentication mechanisms for PCF and Kubernetes authentication to obtain the latest credentials when attempting a Vault login.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for KV Patch in &lt;code&gt;VaultTemplate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Spring Framework 5.3, Spring Data 2020.0, and Project Reactor 2020.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For a complete list of changes, see the &lt;a href="https://github.com/spring-projects/spring-vault/releases/tag/2.3.0-RC1"&gt;&lt;code&gt;2.3.0-RC1&lt;/code&gt; changelog&lt;/a&gt;. We are working towards a GA release&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/releases/tag/2.3.0-RC1"&gt;Release &lt;code&gt;2.3.0-RC1&lt;/code&gt; on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.3.0-RC1/reference/html/"&gt;Documentation for &lt;code&gt;2.3.0-RC1&lt;/code&gt;&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.2.3.RELEASE available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/10/spring-vault-2-2-3-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-12-10:4293</id>
    <updated>2020-12-10T13:07:19Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;d like to announce the availability of Spring Vault service release &lt;code&gt;2.2.3.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release ships with mostly bugfixes, dependency upgrades, and selected features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For a complete list of changes, see the &lt;a href="https://github.com/spring-projects/spring-vault/releases/tag/2.2.3.RELEASE"&gt;2.2.3.RELEASE changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/releases/tag/2.2.3.RELEASE"&gt;Release &lt;code&gt;2.2.3.RELEASE&lt;/code&gt; on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.2.1.RELEASE/reference/html/"&gt;Documentation for &lt;code&gt;2.2.3.RELEASE&lt;/code&gt;&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Batch 4.2.5 and 4.3.1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/10/spring-batch-4-2-5-and-4-3-1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mahmoud Ben Hassine</name>
    </author>
    <id>tag:spring.io,2020-12-11:4300</id>
    <updated>2020-12-10T12:00:00Z</updated>
    <content type="html">&lt;p&gt;I am pleased to announce that Spring Batch 4.2.5 and 4.3.1 have been released and are available now from Maven Central repository. These releases include a number of bug fixes and improvements. You can find the change logs here: &lt;a href="https://github.com/spring-projects/spring-batch/releases/tag/4.2.5.RELEASE"&gt;4.2.5&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-batch/releases/tag/4.3.1"&gt;4.3.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thanks all contributors who had a role in these releases!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-batch"&gt;Spring Batch Home&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-batch"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-batch/docs/current/reference/html/index.html"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data 2020.0.2, Neumann-SR6, and Moore-SR12 available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/09/spring-data-2020-0-2-neumann-sr6-and-moore-sr12-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-12-09:4290</id>
    <updated>2020-12-09T16:07:40Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team, I&amp;rsquo;d like to announce the availability of the &lt;code&gt;2020.0.2&lt;/code&gt;, &lt;code&gt;Neumann-SR6&lt;/code&gt;, and &lt;code&gt;Moore-SR12&lt;/code&gt; service releases. These releases pick up Spring Framework &lt;code&gt;5.3.2&lt;/code&gt; and &lt;code&gt;5.2.12&lt;/code&gt; and will be included in the upcoming Spring Boot releases. &lt;code&gt;2020.0.2&lt;/code&gt; ships with &lt;a href="https://jira.spring.io/issues/?filter=17240"&gt;58 tickets fixed&lt;/a&gt;, &lt;code&gt;Neumann-SR6&lt;/code&gt; ships with &lt;a href="https://jira.spring.io/issues/?filter=17235"&gt;36 tickets fixed&lt;/a&gt;, and, finally, &lt;code&gt;Moore-SR12&lt;/code&gt; ships with &lt;a href="https://jira.spring.io/issues/?filter=17236"&gt;26 tickets fixed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The releases ship with selected improvements, bug fixes, and dependency upgrades.&lt;/p&gt;
&lt;p&gt;Here are the detailed links to each individual artifact and the reference documentation:&lt;/p&gt;&lt;h1&gt;&lt;a href="#2020-0-2" class="anchor" name="2020-0-2"&gt;&lt;/a&gt;2020.0.2&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.1.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.1.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.1.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.1.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.0.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/6.0.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.1.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.1.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.2.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.2.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.4.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.4.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.1.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.1.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.1.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.1.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.3.2 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.3.2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#neumann-sr6" class="anchor" name="neumann-sr6"&gt;&lt;/a&gt;Neumann-SR6&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.3.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.3.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.3.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.3.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.3.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.2.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.2.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.2.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.2.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.2.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#moore-sr12" class="anchor" name="moore-sr12"&gt;&lt;/a&gt;Moore-SR12&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.2.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.2.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>First milestone of Spring Data 2021.0.0 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/09/first-milestone-of-spring-data-2021-0-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-12-09:4291</id>
    <updated>2020-12-09T16:06:43Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who contributed, I&amp;rsquo;d like to announce the first milestone of the Spring Data &lt;code&gt;2021.0.0&lt;/code&gt; release train. This release ships with over &lt;a href="https://jira.spring.io/issues/?filter=17238"&gt;100 tickets fixed&lt;/a&gt;. This Spring Data release is the next release to use &lt;a href="https://spring.io/blog/2020/04/30/updates-to-spring-versions"&gt;calver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most notable new features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;code&gt;deleteAllById(Iterable&amp;lt;ID&amp;gt;)&lt;/code&gt; in &lt;code&gt;CrudRepository&lt;/code&gt; and &lt;code&gt;ReactiveCrudRepository&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Usage of Prepared Statements for &lt;code&gt;CassandraTemplate&lt;/code&gt; and repository queries, including index-based parameter bindings&lt;/li&gt;
  &lt;li&gt;Upgrade to Elasticsearch 7.10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the entire roadmap, including a curated change selection, on the &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-2021.0-%28Pascal%29"&gt;&lt;code&gt;2021.0.0&lt;/code&gt; release wiki page&lt;/a&gt;. We&amp;rsquo;re working now towards a second milestone that will be released early next year. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;d also like to announce that all Spring Data projects are migrating their ticket management from Jira to GitHub issues. Beginning next year, you will find all Jira tickets being migrated into the associated GitHub repository, and we will track issues in GitHub only. Jira will remain as read-only copy.&lt;/p&gt;
&lt;p&gt;To round things off, here are the links to each artifact, documentation, and changelog:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.2 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jdbc/2.2.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.2 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/3.2.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-geode/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/6.1.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.2 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/3.2.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.3 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-r2dbc/1.3.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-ldap/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/3.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/2.5.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.2 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/4.2.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.2 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/4.2.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.3.2, 5.2.12, 5.1.20, 5.0.20, and 4.3.30 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/09/spring-framework-5-3-2-5-2-12-5-1-20-5-0-20-and-4-3-30-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-12-09:4288</id>
    <updated>2020-12-09T09:46:05Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce a full round of Spring Framework releases.&lt;/p&gt;
&lt;p&gt;Spring Framework 5.3.2 includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.3.2"&gt;54 fixes and improvements&lt;/a&gt;. Spring Framework 5.2.12 includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.12.RELEASE"&gt;18 fixes and improvements&lt;/a&gt;. Spring Framework 5.1.20 includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.1.20.RELEASE"&gt;14 selected fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The last maintenance releases for &lt;code&gt;5.0.x&lt;/code&gt; (&lt;code&gt;5.0.20&lt;/code&gt;) and &lt;code&gt;4.3.x&lt;/code&gt; (&lt;code&gt;4.3.30&lt;/code&gt;) with &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.0.20.RELEASE"&gt;12 selected fixes and improvements&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v4.3.20.RELEASE"&gt;8 selected fixes and improvements&lt;/a&gt; respectively are also available today.&lt;/p&gt;
&lt;p&gt;Stay tuned for follow-up Spring Boot releases 2.2.12, 2.3.7, and 2.4.1!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.2/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - December 8th, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/08/this-week-in-spring-december-8th-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-08:4287</id>
    <updated>2020-12-08T23:35:49Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! Can you believe we&amp;rsquo;re already past the first week of the last month of the year? I can&amp;rsquo;t even believe that it&amp;rsquo;s already been a week since we last congregated here, for this humble column, let alone almost a year since 2019! What a whirlwind. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve got a ton of stuff to catch up on so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://hackr.io/blog/java-frameworks"&gt;10 Best Java Frameworks to Use in 2020 [Updated]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/12/03/a-bootiful-podcast-dr-heinz-kabutz"&gt;A Bootiful Podcast: Dr. Heinz Kabutz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/maciejwalkowiak/status/1334884605799882753?s=12"&gt;How to figure out which Spring Boot versions are compatible with which Spring Cloud versions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fV6oVW3YQRw"&gt;J-Fall Virtual 2020: Josh Long - Keynote: Cloud Native Java, Redux - YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/micrometer-metrics/prometheus-rsocket-proxy/releases/tag/v1.3.0"&gt;Micrometer&amp;rsquo;s RSocket-based Prometheus proxy version 1.3.0 has been released. This upgrades to RSocket 1.1, Spring Boot 2.4, and Java 11 runtime for the proxy container image. It&amp;rsquo;s also using Paketo buildpacks to build the container now.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/making/status/1334122420177838080?s=12"&gt;Spring Boot can create a JFR dump&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/12/02/spring-cloud-2020-0-0-m6-aka-ilford-is-available"&gt;Spring Cloud 2020.0.0-M6 (aka Ilford) Is Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/12/02/spring-cloud-app-broker-1-2-1-released"&gt;Spring Cloud App Broker 1.2.1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/12/02/spring-cloud-data-flow-2-6-4-and-2-7-0-released"&gt;Spring Cloud Data Flow 2.6.4 and 2.7.0 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/12/03/spring-security-5-4-2-5-3-6-and-5-2-8-released"&gt;Spring Security 5.4.2, 5.3.6, and 5.2.8 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://inside.java/2020/12/06/towards-openjdk-17/"&gt;Towards OpenJDK 17&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/reactiveoss/status/1336318619785940992?s=12"&gt;Welcome to the Reactive Foundation, R2DBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/vmworld/2020/12/what-now-to-miss-on-vmware-cloud-on-aws.html"&gt;What Now to Miss on VMware Cloud on AWS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/research/2020/12/07/whats-new-differential-datalog/"&gt;What’s new? Differential Datalog.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://maarten.mulders.it/2020/11/whats-new-in-maven-4/"&gt;what&amp;rsquo;s new in Apache Maven 4?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/opensource/2020/12/03/some-thoughts-about-project-health/"&gt;“If You Can’t Measure It, You Can’t Manage It” – Some Thoughts About Project Health&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1335241797489094656"&gt;I asked: Which version of @Java are you using? Why?&lt;/a&gt; and the results are fascinating!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcloud/status/1334163572058943489"&gt;https://twitter.com/springcloud/status/1334163572058943489 @springcloud Spring Cloud 2020.0.0-M6 (aka Ilford) has been released! Would appreciate any feedback on this release before we release our first release candidate early next week! https://t.co/vybA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Dr. Heinz Kabutz</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/03/a-bootiful-podcast-dr-heinz-kabutz" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-12-03:4285</id>
    <updated>2020-12-03T22:56:26Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this week&amp;rsquo;s installment Josh Long talks to his hero, longtime friend (9+ years and counting!), inspiration and a person who has made the JVM a better place to deploy software and the JVM community a better place for people to build software through his JavaSpecialists newsletter and through his amazing content: Dr. Heinz Kabutz. &amp;rsquo;Nuff said. Enjoy!&lt;/p&gt;
&lt;iframe title="Dr. Heinz Kabutz " height="122" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/media/player/8h3tu-f4049d?from=pb6admin&amp;download=1&amp;version=1&amp;auto=0&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Helvetica&amp;skin=1&amp;pfauth=&amp;btn-skin=107"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.4.2, 5.3.6, and 5.2.8 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/03/spring-security-5-4-2-5-3-6-and-5-2-8-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Josh Cummings</name>
    </author>
    <id>tag:spring.io,2020-12-03:4284</id>
    <updated>2020-12-03T18:42:02Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;m pleased to announce the release of Spring Security 5.4.2 (&lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.4.2"&gt;release notes&lt;/a&gt;), 5.3.6 (&lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.3.6.RELEASE"&gt;release notes&lt;/a&gt;), and 5.2.8 (&lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.2.8.RELEASE"&gt;release notes&lt;/a&gt;). These releases deliver bug fixes along with some minor improvements. Users are encouraged to update to the latest patch release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.6.4 and 2.7.0 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/02/spring-cloud-data-flow-2-6-4-and-2-7-0-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ilayaperumal Gopinathan</name>
    </author>
    <id>tag:spring.io,2020-12-02:4283</id>
    <updated>2020-12-02T18:54:00Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud Data Flow team is pleased to announce the release of 2.7.0 and 2.6.4&lt;/p&gt;
&lt;p&gt;While the release 2.6.4 has &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues/4227"&gt;the bug fixes&lt;/a&gt;, the 2.7.0 has the following updates along with the &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.7.0"&gt;bug fixes and improvements&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SCDF dashboard re-design using VMware Clarity toolkit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SCDF dashboard is re-designed using &lt;a href="https://clarity.design/"&gt;VMware Clarity design system&lt;/a&gt;. This is a complete rewrite of SCDF dashboard GUI to get the benefits of the Clarity design.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring Boot 2.3. Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SCDF server components are now updated to use Spring Boot 2.3.5 release.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wavefront integration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Data Flow dashboards for streams, tasks, SCDF server components and Kafka Streams dashboard are available in VMware Wavefront dashboards for integrations. The configurations required to set up the wavefront integration are simplified at the SCDF as well. More information on this can be found &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues/3965"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream Application starters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The out of box streaming applications have been re-designed and developed from the scratch to have Spring Cloud Stream function support as the foundation. These applications are available for the users to import in SCDF. You can refer to &lt;a href="https://spring.io/projects/spring-cloud-stream-applications"&gt;this&lt;/a&gt; page to get the import URL links for the out of the box applications. &lt;/p&gt;
&lt;p&gt;We have also a dedicated documentation available &lt;a href="https://dataflow.spring.io/docs/applications/pre-packaged-3x/#getting-started"&gt;here&lt;/a&gt; for the users on how to use these applications including the migration documentation if you want to migrate from the previous out of the box stream app starters.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href="https://spring.io/blog/2020/11/16/case-study-elasticsearch-sink"&gt;blog series&lt;/a&gt; which provides detailed analysis of all the streaming applications and use cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task Java DSL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Task Java DSL is now available as part of SCDF REST client component and gives the developers the ability to programmatically control task lifecycle operations using this Java DSL. For more information you can refer &lt;a href="https://dataflow.spring.io/docs/feature-guides/batch/java-dsl/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JDK11 Compatibility&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SCDF and Skipper components are compatible with Java 11 Runtime&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deprecation of Helm Hub Chart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Helm charts for SCDF are now deprecated and moved into &lt;a href="https://github.com/bitnami/charts/tree/master/bitnami/spring-cloud-dataflow"&gt;Bitnami OSS charts&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 2020.0.0-M6 (aka Ilford) Is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/02/spring-cloud-2020-0-0-m6-aka-ilford-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Ryan Baxter</name>
    </author>
    <id>tag:spring.io,2020-12-02:4280</id>
    <updated>2020-12-02T15:49:55Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Milestone 6 (M6) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud 2020&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="https://repo.spring.io/milestone/"&gt;Spring Milestone&lt;/a&gt; repository. You can check out the 2020 &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-2020-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release is compatible with Spring Boot 2.4.0.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-2020-release-train" class="anchor" name="notable-changes-in-the-2020-release-train"&gt;&lt;/a&gt;Notable Changes in the 2020 Release Train&lt;/h2&gt;
&lt;p&gt;This release requires Spring Boot 2.4.0.&lt;/p&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes#breaking-changes"&gt;wiki&lt;/a&gt; for a list of all breaking changes in this release train.&lt;/p&gt;
&lt;p&gt;See all of the included issues and pull requests at the &lt;a href="https://github.com/orgs/spring-cloud/projects/49"&gt;Github project&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1791"&gt;Bumped OpenTelemetry to 0.11.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/1788"&gt;Bumped Brave to 5.13.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/pull/1784"&gt;Aligned project structure to be consistent with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Removed deprecated API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &lt;a href="https://github.com/orgs/spring-cloud/projects/49?card_filter_query=repo%3Aspring-cloud%2Fspring-cloud-sleuth"&gt;here&lt;/a&gt; for the list of tasks done for this release&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/2060"&gt;LoadBalancer hints support&lt;/a&gt; was added&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/2059"&gt;Passing request context to LoadBalancer&lt;/a&gt; was implemented&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &lt;a href="https://github.com/orgs/spring-cloud/projects/49?card_filter_query=repo%3Aspring-cloud%2Fspring-cloud-gateway"&gt;here&lt;/a&gt; for the list of tasks done for this release.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-netflix" class="anchor" name="spring-cloud-netflix"&gt;&lt;/a&gt;Spring Cloud Netflix&lt;/h3&gt;
&lt;p&gt;Click &lt;a href="https://github.com/orgs/spring-cloud/projects/49?card_filter_query=repo%3Aspring-cloud%2Fspring-cloud-netflix"&gt;here&lt;/a&gt; for the list of tasks done for this release.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-kubernetes" class="anchor" name="spring-cloud-kubernetes"&gt;&lt;/a&gt;Spring Cloud Kubernetes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;A new implementation of Spring Cloud Kuberentes Config was added based on the Kubernetes Java Client (&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/pull/664"&gt;PR&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;A new implementation of Spring Cloud Kubernetes Discovery Client was added based on the Kubernetes Java Client (&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/pull/669"&gt;PR&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/pull/1566"&gt;Allows @AutoConfigureWireMock to respect user-specified properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Removed deprecated API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &lt;a href="https://github.com/orgs/spring-cloud/projects/49?card_filter_query=repo%3Aspring-cloud%2Fspring-cloud-contract"&gt;here&lt;/a&gt; for the list of tasks done for this release.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-openfeign" class="anchor" name="spring-cloud-openfeign"&gt;&lt;/a&gt;Spring Cloud Openfeign&lt;/h3&gt;
&lt;p&gt;Click &lt;a href="https://github.com/orgs/spring-cloud/projects/49?card_filter_query=repo%3Aspring-cloud%2Fspring-cloud-openfeign"&gt;here&lt;/a&gt; for the list of tasks done for this release.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Corrected implementation of &lt;code&gt;/pause&lt;/code&gt; endpoint (&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/commit/7287a3c767b6a24594b7b08d0a9b3f8f27583ab1"&gt;PR&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ServerHttpRequestContext was added for SC LoadBalancer (&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/pull/857"&gt;PR&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &lt;a href="https://github.com/orgs/spring-cloud/projects/49?card_filter_query=repo%3Aspring-cloud%2Fspring-cloud-commons"&gt;here&lt;/a&gt; for the list of tasks done for this release.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-task" class="anchor" name="spring-cloud-task"&gt;&lt;/a&gt;Spring Cloud Task&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Added Support for KafkaItemReader (&lt;a href="https://github.com/spring-cloud/spring-cloud-task/commit/a84150860449b11362f0a8656ff6f4b5a8c46380"&gt;PR&lt;/a&gt;) and KafkaItemWriter (&lt;a href="https://github.com/spring-cloud/spring-cloud-task/commit/626af448289945e4037b62f823f1041f467ca981"&gt;PR&lt;/a&gt;) for single step jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following modules were updated as part of 2020.0.0-M6:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/84?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;2.0.0-M6 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/milestone/26?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Circuitbreaker &lt;/td&gt;
      &lt;td&gt;2.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/72?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter Build &lt;/td&gt;
      &lt;td&gt;2020.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cli &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;3.0.0-M6 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Task &lt;/td&gt;
      &lt;td&gt;3.0.0-M4 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&lt;br/&gt;    &amp;lt;repositories&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
    &amp;lt;/repositories&amp;gt;&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;2020.0.0-M6&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
dependencies {&#xD;
classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE&amp;quot;&#xD;
}&#xD;
}&#xD;
&#xD;
repositories {&#xD;
maven {&#xD;
url &amp;#39;https://repo.spring.io/milestone&amp;#39;&#xD;
}&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
imports {&#xD;
mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:2020.0.0-M6&amp;#39;&#xD;
}&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud App Broker 1.2.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/12/02/spring-cloud-app-broker-1-2-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gareth Clay</name>
    </author>
    <id>tag:spring.io,2020-11-30:4278</id>
    <updated>2020-12-02T13:37:06Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the release of Spring Cloud App Broker 1.2.1!&lt;/p&gt;
&lt;p&gt;Our focus at the start of the 1.2.x release series has been to update our major dependencies, namely Spring Boot and Spring Cloud Open Service Broker. We have also updated and simplified our build and release process. Since the release of 1.1.1, the 1.2.1 release incorporates the following updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Update the Gradle build to make use of new native features for dependency management and publication&lt;/li&gt;
  &lt;li&gt;Upgrade to Spring Cloud Open Service Broker 3.2.0&lt;/li&gt;
  &lt;li&gt;Upgrade to Spring Boot 2.3.6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;implementation(&amp;quot;org.springframework.cloud:spring-cloud-starter-app-broker-cloudfoundry:1.2.1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-app-broker-cloudfoundry&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.2.1&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-app-broker"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-app-broker"&gt;GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-app-broker/docs/1.2.1/reference/"&gt;Reference Doc&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-app-broker/docs/1.2.1/api/"&gt;API Doc&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
